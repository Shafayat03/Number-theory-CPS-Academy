#include<bits/stdc++.h>
using namespace std;

const int mx = 1e6+123;

int sumDiv[mx];


int main()
{
    int lim = 1e6;

    for(int i = 1; i <= lim; i++)
    {
        for(int  j = i; j <= lim; j+= i)
        {
            sumDiv[j] += i;
        }
    }






/**
i :  divisors of i

1: 1
2: 1 2
3: 1 3
4: 1 2 4
5: 1 5
6: 1 2 3 6
7: 1 7
8: 1 2 4 8
9: 1 3 9
10: 1 2 5 10

*/



/// storing all divisors of a number 

#include<bits/stdc++.h>
using namespace std;

const int mx = 1e3+123;
vector<int>d[mx];



int main()
{
    int lim = 10;

    for(int i = 1; i <= lim; i++)
    {
        for(int  j = i; j <= lim; j+= i)
        {
            d[j].push_back(i);
        }
    }


    for(int i = 1;i <= lim; i++){

        cout << i  << ":"<< " ";
        for(auto u : d[i]) cout << u << " ";
        cout << endl;
    }



}




///






#include<bits/stdc++.h>
using namespace std;

const int mx = 1e7+123;
int cnt[mx];



int main()
{
    int lim = 10;

    for(int i = 1; i <= lim; i++)
    {
        for(int  j = i; j <= lim; j+= i)
        {
            cnt[j]++;
        }
    }

    int n;
    cin >> n;
    long long  ans = 0;
    for(int i = 1;i <= lim; i++){

        ans += (1LL * i * cnt[i]);
    }
    cout << ans << endl;

  return 0;
}












